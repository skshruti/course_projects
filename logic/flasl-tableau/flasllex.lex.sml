functor FlasllexLexFun(structure Tokens: Flasllex_TOKENS)=
   struct
    structure UserDeclarations =
      struct
open Tokens
type pos = int
val linenum = ref 1
val charsAbove = ref 1
type lexresult= (svalue,pos) token
fun eof () = Tokens.EOF(0,0)
(*  *)
fun init() = ()
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\005\005\005\005\005\005\005\005\005\035\037\005\005\005\005\005\
\\005\005\005\005\005\005\005\005\005\005\005\005\005\005\005\005\
\\035\003\034\003\003\003\003\003\033\032\003\003\003\003\031\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\
\\003\028\003\003\003\024\003\003\003\021\003\003\003\003\018\016\
\\003\003\003\003\006\003\003\003\003\003\003\003\003\003\003\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\005\
\\003"
),
 (3, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (6, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\007\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (7, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\008\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (8, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\015\004\
\\004\004\009\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (9, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\010\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (10, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\011\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\012\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\013\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\014\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\017\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (18, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\019\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\020\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\022\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\023\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\025\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\026\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (26, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\027\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\029\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\004\000\004\004\004\004\004\000\000\004\004\004\004\000\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\030\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\
\\004\004\004\004\004\004\004\004\004\004\004\004\004\004\004\000\
\\004"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\036\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\036\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = List.map f (List.rev (tl (List.rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(List.map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [(N 53),(N 55)], trans = 3},
{fin = [(N 53)], trans = 3},
{fin = [(N 55)], trans = 0},
{fin = [(N 53),(N 55)], trans = 6},
{fin = [(N 53)], trans = 7},
{fin = [(N 53)], trans = 8},
{fin = [(N 53)], trans = 9},
{fin = [(N 53)], trans = 10},
{fin = [(N 53)], trans = 11},
{fin = [(N 53)], trans = 12},
{fin = [(N 53)], trans = 13},
{fin = [(N 50),(N 53)], trans = 3},
{fin = [(N 31),(N 53)], trans = 3},
{fin = [(N 53),(N 55)], trans = 16},
{fin = [(N 23),(N 53)], trans = 3},
{fin = [(N 53),(N 55)], trans = 18},
{fin = [(N 53)], trans = 19},
{fin = [(N 16),(N 53)], trans = 3},
{fin = [(N 53),(N 55)], trans = 21},
{fin = [(N 26),(N 53)], trans = 22},
{fin = [(N 35),(N 53)], trans = 3},
{fin = [(N 53),(N 55)], trans = 24},
{fin = [(N 53)], trans = 25},
{fin = [(N 53)], trans = 26},
{fin = [(N 40),(N 53)], trans = 3},
{fin = [(N 53),(N 55)], trans = 28},
{fin = [(N 53)], trans = 29},
{fin = [(N 20),(N 53)], trans = 3},
{fin = [(N 12),(N 55)], trans = 0},
{fin = [(N 8),(N 55)], trans = 0},
{fin = [(N 6),(N 55)], trans = 0},
{fin = [(N 10),(N 55)], trans = 0},
{fin = [(N 4),(N 55)], trans = 35},
{fin = [(N 4)], trans = 35},
{fin = [(N 1)], trans = 0}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

fun makeLexer yyinput =
let	val yygone0=1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = String.substring(!yyb,i0,i-i0)
			     val yypos = i0+ !yygone
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  1 => (linenum := !linenum + 1; charsAbove := yypos; lex())
| 10 => (QUOTE(!linenum, yypos - !charsAbove))
| 12 => (FULLSTOP(!linenum, yypos - !charsAbove))
| 16 => (NOT(!linenum, yypos - !charsAbove))
| 20 => (AND(!linenum, yypos - !charsAbove))
| 23 => (OR(!linenum, yypos - !charsAbove))
| 26 => (IF(!linenum, yypos - !charsAbove))
| 31 => (THEN(!linenum, yypos - !charsAbove))
| 35 => (IFF(!linenum, yypos - !charsAbove))
| 4 => (lex())
| 40 => (ELSE(!linenum, yypos - !charsAbove))
| 50 => (THEREFORE(!linenum, yypos - !charsAbove))
| 53 => let val yytext=yymktext() in ID(yytext, !linenum, yypos - !charsAbove) end
| 55 => (raise Fail("ScanError at char "^Int.toString(yypos - !charsAbove)^" in line "^Int.toString(!linenum)); lex())
| 6 => (LPAR(!linenum, yypos - !charsAbove))
| 8 => (RPAR(!linenum, yypos - !charsAbove))
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Unsafe.Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (String.size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := String.substring(!yyb,i0,l-i0)^newchars;
		     yygone := !yygone+i0;
		     yybl := String.size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(Unsafe.CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(Unsafe.CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if String.substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
